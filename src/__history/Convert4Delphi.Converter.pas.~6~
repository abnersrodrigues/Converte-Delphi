unit Convert4Delphi.Converter;

interface

Uses
  System.SysUtils, System.Classes, Convert4Delphi.Interfaces,
  FireDAC.Comp.Client, Convert4Delphi.Interfaces.Components, FireDAC.Comp.UI,
  FireDAC.Comp.BatchMove.SQL;

Type

  TConverter = class(TInterfacedObject, iConverter)
    private
      FBatchMove: iBatchMove;
      FBatchMoveSQLReader: iBatchMoveSQLReader;
      FBatchMoveSQLWriter: iBatchMoveSQLWriter;
      FGUIxWaitCursor: iGUIxWaitCursor;
    public
      Constructor Create(AConexaoFrom, AConexaoTo: TFDConnection; ATableNameFrom, ATableNameTo: String);
      Destructor Destroy; Override;
      class function New(AConexaoFrom, AConexaoTo: TFDConnection; ATableNameFrom, ATableNameTo: String): iConverter;
      function Executar: iConverter;
  end;

implementation

uses
  Convert4Delphi.Component.BatchMove,
  Convert4Delphi.Component.GUIxWaitCursor,
  Convert4Delphi.Component.BatchMoveSQLReader,
  Convert4Delphi.Component.BatchMoveSQLWriter;

{ TConverter }

Constructor TConverter.Create(AConexaoFrom, AConexaoTo: TFDConnection; ATableNameFrom, ATableNameTo: String);
begin
  FBatchMove := TBatchMove.New;
  FGUIxWaitCursor := TGUIxWaitCursor.New(nil);
  FBatchMoveSQLReader := TBatchMoveSQLReader.New(AConexaoFrom, ATableNameFrom);
  FBatchMoveSQLWriter := TBatchMoveSQLWriter.New(AConexaoTo, ATableNameTo);
end;

destructor TConverter.Destroy;
begin

  inherited;
end;

function TConverter.Executar: iConverter;
begin
  Result := Self;
  TBatchMove(FBatchMove).Component.Reader := TBatchMoveSQLReader(FBatchMoveSQLReader).Component;
  TBatchMove(FBatchMove).Component.Writer := TBatchMoveSQLWriter(FBatchMoveSQLWriter).Component;
  TBatchMove(FBatchMove).Component.CommitCount := 100000;
  TBatchMove(FBatchMove).Component.Execute;
end;

class function TConverter.New(AConexaoFrom, AConexaoTo: TFDConnection; ATableNameFrom, ATableNameTo: String): iConverter;
begin
  Result := Self.Create(AConexaoFrom, AConexaoTo, ATableNameFrom, ATableNameTo);
end;

end.

